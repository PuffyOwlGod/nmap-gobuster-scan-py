#!/usr/bin/env python3

import nmap3
import subprocess
import re
import os

# Ensuring the script is being run as root:
if os.geteuid() != 0:
    print("This script must be run with root privileges.\nTry running the script using sudo.")
    exit()

# Defining variables.
nmap = nmap3.NmapScanTechniques()
# Used to know how many iterations for active hosts depending on the CIDR.
cidr_to_host_number = {1:2147483394, 2:1073741698, 3:536870850, 4:268435426,
                       5:134217714, 6:67108858, 7:33554430, 8:16777216,
                       9: 8388354, 10:4194178, 11:2097090, 12:1048546,
                       13:524274, 14:262138, 15:131070, 16:65026, 17:32514,
                       18:162568, 19:8130, 20:4066, 21:2034, 22:1018, 23:510,
                       24:256, 25:128, 26:64, 27:32, 28:16, 29:8, 30:4, 31:2,
                       32:1}
# Defining own IP address to avoid scanning it.
ip_a = subprocess.run(['ip', '-f', 'inet', 'a', 'show', 'eth0'], text = True, capture_output = True)
own_ip = re.findall(r'inet ((?:\d{1,3}\.){3}(?:\d{1,3}))', str(ip_a))

# Takes user input for the network. While True loop is used to force user to input an IP.
while True:
    network = input("Enter the network that you want scanned using CIDR notation (Example: 192.168.0.0/24): ")
    valid_structure = bool(re.search(r'(?:\d{1,3}\.){3}(?:\d{1,3})/[1-9]\d?', network))

    if valid_structure == True:
        break
    
    else:
        print(f"The input \'{network}\' is invalid. Enter a valid IP with a CIDR.\n")


# Nmap scan function. Scans a given network to determine
# active hosts before scanning each host for open ports.
# The network scan is done using a ping sweep to confirm
# live hosts, allowing the port scan to be sped up.

def NmapScan(network):
    # Defining local variables.
    live_hosts = []

    # Performs the ping sweep to find live hosts.
    ping_scan = nmap.nmap_ping_scan(network)

    # Determines the CIDR of the network from the input.
    cidr = re.findall(r'/(\d\d?)', network)

    # Determines maximum number of hosts depending on CIDR.
    hosts_on_net = cidr_to_host_number[int(cidr[0])]

    # Pulls IP address and the host's state from the scan results.
    ip = re.findall(r'((?:\d{1,3}\.){3}(?:\d{1,3}))', str(ping_scan))
    state = re.findall(r'{\'state\': \'([a-z]*)', str(ping_scan))

    # Confirms that there is at least one live IP to prevent the for loop from calling an index from an empty list.
    if bool(state) == False:
        print("No live hosts found.")
        return
   
   # Loop to determine live hosts.
    for host_ip in range(hosts_on_net):
        if state[host_ip] != 'down':
            live_hosts.append(ip[host_ip])

    # Loop to perform host SYN scanning.
    for target_ip in live_hosts:

        # Printing a new line to break up each IP address.
        print('\n')

        # Detects if the IP being checked is this machine, and skips the scan if so.
        if target_ip == own_ip[0]:
            print(f"Host {target_ip} is up. This is your IP.")
            continue

        # Perform the SYN scan on the current host.
        syn_scan = nmap.nmap_syn_scan(target_ip)

        # Finding all open ports for each IP.
        open_ports = re.findall(r'portid\': \'(\d*)\', \'state\': \'open\'', str(syn_scan))

        # Displaying host information. Note that web enumeration results are displayed when the function runs.
        print(f"Host {target_ip} is up. Ports:")
        
        for port in open_ports:
              print(f"Port {port} is open.")
        
        closed_port_num = 1000-len(open_ports)
        print(f"{closed_port_num} ports are closed.")

        # Checking open ports for port 80 to perform web enumeration.
        if '80' in open_ports:
            GobusterScan(target_ip)


# Gobuster scan function. Runs Gobuster using the medium
# dirbuster wordlist to find hidden directories. Should
# only be run if port 80 is open.
def GobusterScan(target_ip, port):
    try:
        # Creates the Gobuster scan as a subprocess.
        result = subprocess.run([
            'gobuster',
            'dir',
            '-u',
            f'http://{target_ip}:{port}',
            '-w',
            '/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt',
        ], text=True, capture_output=True)

        # If Gobuster scan was successful, find the valid dictionaries and display them.
        if result.returncode == 0:
            output = result.stdout
            matches = re.findall(r'\[2K(/.*\d\])', output)
            if matches:
                print(f"Directories found on {target_ip}:{port}:")
                for match in matches:
                    print(match)

    except FileNotFoundError:
        print("Gobuster not found. Make sure it's installed and in your PATH.")

def SubprocessScan(network):
    

    live_hosts = []

    ping_scan = nmap.nmap_ping_scan(network)
    
    cidr = re.findall(r'/(\d\d?)', network)
    hosts_on_net = cidr_to_host_number[int(cidr[0])]
    
    ip = re.findall(r'((?:\d{1,3}\.){3}(?:\d{1,3}))', str(ping_scan))
    state = re.findall(r'{\'state\': \'([a-z]*)', str(ping_scan))
    
    if bool(state) == False:
        print("No live hosts found.")
        return
    for host_ip in range(hosts_on_net):
        if state[host_ip] != 'down':
            live_hosts.append(ip[host_ip])

    for target in live_hosts:
        if target == own_ip[0]:
            print(f"Host {target} is up. This is your IP.")
            continune

        result = subprocess.run([
            'nmap',
            '-sV',
            #'-sC',
            f'{target}'
            ], text=True, capture_output=True)

        if result.returncode == 0:
            output = result.stdout
            print(output)
            http = re.findall('(\d*)/tcp\s*open\s*http\s*', str(output))
            print(http, len(http))
            if bool(http) == False:
                continue
            
            for cycle in range(len(http)):
                GobusterScan(target, http[cycle])



SubprocessScan(network)
